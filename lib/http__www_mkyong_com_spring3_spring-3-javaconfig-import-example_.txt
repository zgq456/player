http://www.mkyong.com/spring3/spring-3-javaconfig-import-example/

Spring 3 JavaConfig @Import example Advertise Contact Us Write For Us RSS feed Donate Home All Tutorials Java Core Java Core Tutorials 1. Java I/O 2. Java XML 3. Java JSON 4. Java RegEx 5. JDBC 6. Java Misc JSF JSF Tutorials 1. JSF 2.0 Spring Spring Tutorials 1. Spring Core 2. Spring MVC 3. Spring Security 4. Spring MongoDB 5. Spring Batch Hibernate Hibernate Tutorials 1. Hibernate Core Struts Struts Tutorials 1. Struts 1 2. Struts 2 Android Android Tutorials 1. Android Core Others Apache Wicket JAX-WS (SOAP) JAX-RS (REST) Maven Google App Engine Java MongoDB jUnit TestNG jQuery Quartz Scheduler Log4j Logging Spring 3 JavaConfig @Import example Posted on June 20, 2011 By mkyong Normally, you will split a large Spring XML bean files into multiple small files, group by module or category, to make things more maintainable and modular. For example, <beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
 
	<import resource="config/customer.xml"/>
        <import resource="config/scheduler.xml"/>
 
</beans> In Spring3 JavaConfig, the equivalent functionality is @Import. package com.mkyong.config;
 
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
 
@Configuration
@Import({ CustomerConfig.class, SchedulerConfig.class })
public class AppConfig {
 
} @Import Example See a full example of using JavaConfig @Import. 1. Directory Structure Directory structure of this example. 2. Spring Beans Two simple Spring beans. File : CustomerBo.java package com.mkyong.core;
 
public class CustomerBo {
 
	public void printMsg(String msg) {
 
		System.out.println("CustomerBo : " + msg);
	}
 
} File : SchedulerBo.java package com.mkyong.core;
 
public class SchedulerBo {
 
	public void printMsg(String msg) {
 
		System.out.println("SchedulerBo : " + msg);
	}
 
} 3. @Configuration example Now, use JavaConfig @Configuration to declare above beans. File : CustomerConfig.java package com.mkyong.config;
 
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
 
import com.mkyong.core.CustomerBo;
 
@Configuration
public class CustomerConfig {
 
	@Bean(name="customer")
	public CustomerBo customerBo(){
 
		return new CustomerBo();
 
	}
} File : SchedulerConfig.java package com.mkyong.config;
 
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import com.mkyong.core.SchedulerBo;
 
@Configuration
public class SchedulerConfig {
 
	@Bean(name="scheduler")
	public SchedulerBo suchedulerBo(){
 
		return new SchedulerBo();
 
	}
 
} 4. @Import example Use @Import to load multiple configuration files. File : AppConfig.java package com.mkyong.config;
 
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
 
@Configuration
@Import({ CustomerConfig.class, SchedulerConfig.class })
public class AppConfig {
 
} 5. Run it Load the main configuration file , and test it. package com.mkyong.core;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import com.mkyong.config.AppConfig;
 
public class App {
	public static void main(String[] args) {
 
		ApplicationContext context = new AnnotationConfigApplicationContext(
				AppConfig.class);
 
		CustomerBo customer = (CustomerBo) context.getBean("customer");
		customer.printMsg("Hello 1");
 
		SchedulerBo scheduler = (SchedulerBo) context.getBean("scheduler");
		scheduler.printMsg("Hello 2");
 
	}
} Output CustomerBo : Hello 1
SchedulerBo : Hello 2 Download Source Code Download It – Spring3-JavaConfig-Import-Example.zip (7 KB) References Spring3 @Configuration example Spring XML import example Tags : javaconfig spring3 mkyong Founder of Mkyong.com and HostingCompass.com, love Java and open source stuff. Follow him on Twitter, or befriend him on Facebook or Google Plus. If you like my tutorials, consider making a donation to this charity, thanks. Related Posts Spring 3 JavaConfig example Spring 3 and JSR-330 @Inject and @Named example Struts 2 + Spring 3 + Quartz 1.8 Scheduler Example Spring 3 MVC hello world example Spring 3 REST hello world example Popular Posts Top 8 Java People You Should Know Top 20 Java Websites Top 5 Free Java eBooks Top 10 Java Regular Expression Examples Top 5 Open Source Q&A Systems You might also like following tutorials : Pingback: Um mundo Java sem XML | Blog da Concrete Levan Thanks! RaviCKota It seems we can also extend the classes annotated with @Configuration. I tried something like @Configuration public class ParentConfig{ @Bean(name=”a”) public A getA(){…} } @Configuration public class ChildConfig extends ParentConfig{ @Bean(name =”b”) public B getB(){….} } ApplicationContext ctx = new AnnotationConfigApplicationContext(ChildConfig.class); ctx.getBean(“a”) returns object of type “A” So more or less some thing like include vs import Pingback: Spring Tutorial Zakos So define 1 file AppConfig.java which will configure every needed bean instead of bean_nameConfig.java for each bean ( 1 main config file instead many ) OR each needed class as bean will have his configFile like in the example above? OR Instead of beanNameConfig.java , there is another way to declare a class as a bean , @Component , If i’m not wrong , (and another ways ? @Service ? ) , is it Spring 2.5 way? no needed for Spring 3 way? http://www.mkyong.com mkyong Better practice is group related beans in in a single module file, then create a main config file to include all, centralize control. It will make your project more modular and easy to maintain. Of course, @Component is still supported in Spring3 :). JavaConfig is just a new way to define the configuration stuff in Spring3. Pingback: How to load multiple Spring bean configuration file Recent Posts How to Apache Ant on Mac OS X Windows 8.1, black screen with movable cursor Java - Convert String to Enum object Linux - How to extract a tar.gz file Mac OSX - What program is using port 8080 Popular Tutorials Android Tutorial JSF 2.0 Tutorial Spring Tutorial Maven Tutorial Hibernate Tutorial All Available Tutorials Java Core Technologies : Java I/O, Java RegEx, Java XML, Java JSON, JDBC, Java Misc J2EE Frameworks : Hibernate, JSF 2.0, Spring Core, Spring MVC, Spring Security, Spring MongoDB, Spring BatchApache Wicket, Struts 1.x, Struts 2.x Web Service : JAX-WS (SOAP), JAX-RS (REST) Build Tools : Maven, Archiva Unit Test Frameworks : jUnit, TestNG Others : Android, Google App Engine, jQuery, Java MongoDB, Quartz Scheduler, Log4j Favorites Links Android Getting Started Google App Engine - Java DZone - Fresh Links Official Java EE 5 Tutorial Official Java EE 6 Tutorial Official Java EE 7 Tutorial Spring 2.5.x documentation Spring 3.2.x documentation Spring Security 3.2.x documentation Hibernate core 4.3 documentation Java SE 6.0 API documentation JSP home page JSF home page Eclipse IDE for Java developer Struts 1.3.x documentation Struts 2.3.x documentation Maven home page Maven central repository Search Ant home page JAX-WS Official Website JAX-RS Official Website (Jersey) Friends & Links Java Code Geeks PHP Tutorials TenthOfMarch Web Security Blog Web Development Cédric Beust (TestNG) About Us Mkyong.com is a weblog dedicated to Java/J2EE developers and Web Developers. We constantly publish useful tricks, tutorials on J2EE or web development. All examples are simple, easy to read, and full source code available, and of course well tested in our development environment. We're Social Twitter - Follow Me Facebook - Like Me Google Plus - Add Me RSS - Subscribe Me Copyright © 2008-2014 Mkyong.com, all rights reserved.